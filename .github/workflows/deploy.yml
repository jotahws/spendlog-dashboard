name: Deploy spendlog-dashboard

on:
  push:
    branches: ['main']

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: prod

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create .env.production file
        run: |
          set -e  # Exit on error
          echo "" > .env.production  # Clear the file if it exists
          echo "API_BASE_URL=${{ secrets.API_BASE_URL }}" >> .env.production
          echo "NEXT_PUBLIC_BASE_URL=${{ secrets.NEXT_PUBLIC_BASE_URL }}" >> .env.production
        shell: bash

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.CI_AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.CI_AWS_SECRET_KEY }}
          aws-region: ${{ secrets.EC2_REGION }}
      - name: Get runner IP Address
        id: ip
        uses: haythem/public-ip@v1.2
      - name: Whitelist runner IP Address
        run: |
          aws ec2 authorize-security-group-ingress \
            --group-id ${{ secrets.EC2_SG_ID }} \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32

      - name: Deploy and Build on EC2
        run: |
          echo "Copying files to the EC2 instance..."
          scp -o StrictHostKeyChecking=no -r $GITHUB_WORKSPACE/* ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:${{ secrets.EC2_DEPLOY_PATH }} || { echo "Failed to copy files"; exit 1; }

          echo "Connecting via SSH and deploying with Docker Compose..."
          # Connect via SSH and build, stop, remove, and run the new container
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            set -e  # Exit on error
            cd ${{ secrets.EC2_DEPLOY_PATH }}
            
            echo "Starting Docker Compose..."
            docker-compose down || true
            docker-compose pull
            docker-compose up -d --build || { echo "Failed to start containers"; exit 1; }
          EOF

      - name: Revoke runner IP Address
        run: |
          aws ec2 revoke-security-group-ingress \
            --group-id ${{ secrets.EC2_SG_ID }} \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32
